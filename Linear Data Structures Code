import java.util.Scanner;

public class LinearDataStructures {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int choice;

        while (true) {
            System.out.println("Choose Data Structure:");
            System.out.println("1. Stack");
            System.out.println("2. Queue");
            System.out.println("3. Linked List");
            System.out.println("4. Circular Linked List");
            System.out.println("0. Exit");
            System.out.print("Enter choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1:
                    stackMenu(sc);
                    break;
                case 2:
                    queueMenu(sc);
                    break;
                case 3:
                    linkedListMenu(sc);
                    break;
                case 4:
                    circularListMenu(sc);
                    break;
                case 0:
                    System.out.println("Goodbye!");
                    sc.close();
                    return;
                default:
                    System.out.println("Invalid choice.");
            }
            System.out.println();
        }
    }

    // stack
    static void stackMenu(Scanner sc) {
        int[] stack = new int[100];
        int top = -1;
        int op;

        System.out.println();
        System.out.println("--- Stack Operations ---");
        do {
            System.out.println("Choose operation:");
            System.out.println("1. Push");
            System.out.println("2. Pop");
            System.out.println("3. Display");
            System.out.println("0. Back");
            System.out.print("Enter choice: ");
            op = sc.nextInt();

            switch (op) {
                case 1:
                    System.out.print("Enter value to push: ");
                    int v = sc.nextInt();
                    if (top < stack.length - 1) {
                        stack[++top] = v;
                        System.out.println("Pushed " + v + " into stack.");
                    } else {
                        System.out.println("Stack is full.");
                    }
                    break;
                case 2:
                    if (top >= 0) {
                        System.out.println("Popped: " + stack[top--]);
                    } else {
                        System.out.println("Stack is empty.");
                    }
                    break;
                case 3:
                    System.out.print("Stack contents: ");
                    if (top < 0) {
                        System.out.print("(empty)");
                    } else {
                        for (int i = top; i >= 0; i--) {
                            System.out.print(stack[i] + (i == 0 ? "" : " "));
                        }
                    }
                    System.out.println();
                    break;
                case 0:
                    break;
                default:
                    System.out.println("Invalid operation.");
            }
        } while (op != 0);
    }

    // queue
    static void queueMenu(Scanner sc) {
        int[] q = new int[100];
        int front = 0, rear = -1, size = 0;
        int op;

        System.out.println();
        System.out.println("--- Queue Operations ---");
        do {
            System.out.println("Choose operation:");
            System.out.println("1. Enqueue");
            System.out.println("2. Dequeue");
            System.out.println("3. Display");
            System.out.println("0. Back");
            System.out.print("Enter choice: ");
            op = sc.nextInt();

            switch (op) {
                case 1:
                    System.out.print("Enter value to enqueue: ");
                    int val = sc.nextInt();
                    if (size < q.length) {
                        rear = (rear + 1) % q.length;
                        q[rear] = val;
                        size++;
                        System.out.println("Enqueued " + val + " into queue.");
                    } else {
                        System.out.println("Queue is full.");
                    }
                    break;
                case 2:
                    if (size > 0) {
                        int d = q[front];
                        front = (front + 1) % q.length;
                        size--;
                        System.out.println("Dequeued: " + d);
                    } else {
                        System.out.println("Queue is empty.");
                    }
                    break;
                case 3:
                    System.out.print("Queue contents: ");
                    if (size == 0) {
                        System.out.print("(empty)");
                    } else {
                        for (int i = 0; i < size; i++) {
                            int idx = (front + i) % q.length;
                            System.out.print(q[idx] + (i == size - 1 ? "" : " "));
                        }
                    }
                    System.out.println();
                    break;
                case 0:
                    break;
                default:
                    System.out.println("Invalid operation.");
            }
        } while (op != 0);
    }

    // linkedlist
    static class Node {
        int data;
        Node next;
        Node(int d) { data = d; }
    }

    static void linkedListMenu(Scanner sc) {
        Node head = null;
        int op;

        System.out.println();
        System.out.println("--- Linked List Operations ---");
        System.out.println("(Insert at end, Delete at beginning)");
        do {
            System.out.println("Choose operation:");
            System.out.println("1. Insert at end");
            System.out.println("2. Delete at beginning");
            System.out.println("3. Display");
            System.out.println("0. Back");
            System.out.print("Enter choice: ");
            op = sc.nextInt();

            switch (op) {
                case 1:
                    System.out.print("Enter value to insert: ");
                    int x = sc.nextInt();
                    Node n = new Node(x);
                    if (head == null) {
                        head = n;
                    } else {
                        Node cur = head;
                        while (cur.next != null) cur = cur.next;
                        cur.next = n;
                    }
                    System.out.println("Inserted " + x + " into list.");
                    break;
                case 2:
                    if (head == null) {
                        System.out.println("List is empty.");
                    } else {
                        System.out.println("Deleted: " + head.data);
                        head = head.next;
                    }
                    break;
                case 3:
                    System.out.print("List contents: ");
                    if (head == null) {
                        System.out.print("(empty)");
                    } else {
                        Node c = head;
                        boolean first = true;
                        while (c != null) {
                            if (!first) System.out.print(" ");
                            System.out.print(c.data);
                            first = false;
                            c = c.next;
                        }
                    }
                    System.out.println();
                    break;
                case 0:
                    break;
                default:
                    System.out.println("Invalid operation.");
            }
        } while (op != 0);
    }

    // circular linked list
    static void circularListMenu(Scanner sc) {
        Node tail = null; // tail.next is head
        int op;

        System.out.println();
        System.out.println("--- Circular Linked List Operations ---");
        System.out.println("(Insert at end, Delete at beginning)");
        do {
            System.out.println("Choose operation:");
            System.out.println("1. Insert");
            System.out.println("2. Delete");
            System.out.println("3. Display");
            System.out.println("0. Back");
            System.out.print("Enter choice: ");
            op = sc.nextInt();

            switch (op) {
                case 1:
                    System.out.print("Enter value to insert: ");
                    int v = sc.nextInt();
                    Node n = new Node(v);
                    if (tail == null) {
                        tail = n;
                        tail.next = tail;
                    } else {
                        n.next = tail.next; // new -> head
                        tail.next = n;      // old tail -> new
                        tail = n;           // new becomes tail
                    }
                    System.out.println("Inserted " + v + " into circular list.");
                    break;
                case 2:
                    if (tail == null) {
                        System.out.println("Circular list is empty.");
                    } else {
                        Node head = tail.next;
                        System.out.println("Deleted: " + head.data);
                        if (head == tail) { // only one node
                            tail = null;
                        } else {
                            tail.next = head.next;
                        }
                    }
                    break;
                case 3:
                    System.out.print("Circular list contents: ");
                    if (tail == null) {
                        System.out.print("(empty)");
                    } else {
                        Node cur = tail.next;
                        boolean first = true;
                        do {
                            if (!first) System.out.print(" ");
                            System.out.print(cur.data);
                            first = false;
                            cur = cur.next;
                        } while (cur != tail.next);
                    }
                    System.out.println();
                    break;
                case 0:
                    break;
                default:
                    System.out.println("Invalid operation.");
            }
        } while (op != 0);
    }
}
